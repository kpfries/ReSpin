[gd_resource type="VisualShader" load_steps=36 format=2]

[sub_resource type="VisualShaderNodeExpression" id=1]
size = Vector2( 542, 261 )
expression = "depth = 2.0 * depth - 1.0;
difference = near * far / (far + depth * (near - far));
"

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
operator = 1

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "fragcoord"

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]

[sub_resource type="VisualShaderNodeScalarUniform" id=5]
uniform_name = "near"

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "far"

[sub_resource type="VisualShaderNodeScalarClamp" id=7]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, 0.2 ]
operator = 9

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=11]

[sub_resource type="VisualShaderNodeScalarOp" id=12]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=13]
output_port_for_preview = 0
operator = 2

[sub_resource type="OpenSimplexNoise" id=14]

[sub_resource type="NoiseTexture" id=15]
width = 1024
height = 1024
seamless = true
noise = SubResource( 14 )

[sub_resource type="VisualShaderNodeTexture" id=16]
output_port_for_preview = 0
texture = SubResource( 15 )

[sub_resource type="VisualShaderNodeVectorOp" id=17]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarUniform" id=18]
uniform_name = "wave_width"

[sub_resource type="VisualShaderNodeColorUniform" id=19]
output_port_for_preview = 0
uniform_name = "water_color"

[sub_resource type="VisualShaderNodeScalarOp" id=20]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=21]
output_port_for_preview = 0
source = 4
texture = SubResource( 15 )

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeExpression" id=23]
size = Vector2( 549, 255 )
expression = "depth = 2.0 * depth - 1.0;
difference = near * far / (far + depth * (near - far));
"

[sub_resource type="VisualShaderNodeVectorOp" id=24]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0.5, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=25]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 3

[sub_resource type="VisualShaderNodeVectorOp" id=26]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0.25, 0 ) ]
operator = 1

[sub_resource type="OpenSimplexNoise" id=27]

[sub_resource type="NoiseTexture" id=28]
width = 128
height = 128
seamless = true
noise = SubResource( 27 )

[sub_resource type="VisualShaderNodeTexture" id=29]
texture = SubResource( 28 )

[sub_resource type="VisualShaderNodeInput" id=30]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=31]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=32]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorOp" id=33]

[sub_resource type="VisualShaderNodeVectorOp" id=34]

[sub_resource type="VisualShaderNodeVectorFunc" id=35]
function = 28

[resource]
code = "shader_type spatial;
uniform sampler2D tex_vtx_2;uniform vec4 water_color : hint_color;
uniform sampler2D tex_frg_4;uniform float near;
uniform float far;
uniform float wave_width;



void vertex() {
// Input:4
	vec3 n_out4p0;
	n_out4p0 = vec3(UV,0.0);

// Input:5
	float n_out5p0;
	n_out5p0 = TIME;

// ScalarOp:11
	float n_in11p1 = 10.00000;
	float n_out11p0;
	n_out11p0 = n_out5p0 / n_in11p1;

// VectorOp:6
	vec3 n_out6p0;
	n_out6p0 = n_out4p0 + vec3(n_out11p0);

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	vec4 tex_vtx_2_read = texture( tex_vtx_2 , n_out6p0.xy );
	n_out2p0 = tex_vtx_2_read.rgb;
	n_out2p1 = tex_vtx_2_read.a;

// VectorFunc:9
	vec3 n_out9p0;
	n_out9p0=sin(n_out2p0);

// VectorOp:10
	vec3 n_in10p1 = vec3(0.00000,0.50000,0.00000);
	vec3 n_out10p0;
	n_out10p0 = n_out9p0 * n_in10p1;

// Input:3
	vec3 n_out3p0;
	n_out3p0 = VERTEX;

// VectorOp:8
	vec3 n_out8p0;
	n_out8p0 = n_out10p0 + n_out3p0;

// VectorOp:12
	vec3 n_in12p1 = vec3(0.00000,0.25000,0.00000);
	vec3 n_out12p0;
	n_out12p0 = n_out8p0 - n_in12p1;

// Output:0
	VERTEX = n_out12p0;

}

void fragment() {
// ColorUniform:42
	vec3 n_out42p0;
	float n_out42p1;
	n_out42p0 = water_color.rgb;
	n_out42p1 = water_color.a;

// Input:35
	float n_out35p0;
	n_out35p0 = TIME;

// ScalarOp:38
	float n_in38p1 = 10.00000;
	float n_out38p0;
	n_out38p0 = n_out35p0 / n_in38p1;

// Input:36
	vec3 n_out36p0;
	n_out36p0 = vec3(UV,0.0);

// VectorOp:37
	vec3 n_out37p0;
	n_out37p0 = vec3(n_out38p0) + n_out36p0;

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	vec4 tex_frg_4_read = texture( tex_frg_4 , n_out37p0.xy );
	n_out4p0 = tex_frg_4_read.rgb;
	n_out4p1 = tex_frg_4_read.a;

// Input:7
	vec3 n_out7p0;
	n_out7p0 = vec3(SCREEN_UV,0.0);

// Texture:6
	float n_out6p0;
	float n_out6p1;
	{
		float _depth = texture( DEPTH_TEXTURE , n_out7p0.xy ).r;
		n_out6p0 = _depth;
		n_out6p1 = 1.0;
	}

// ScalarUniform:25
	float n_out25p0;
	n_out25p0 = near;

// ScalarUniform:26
	float n_out26p0;
	n_out26p0 = far;

// Expression:9
	float n_out9p0;
	n_out9p0=0.0;
	{
		n_out6p0 = 2.0 * n_out6p0 - 1.0;
		n_out9p0 = n_out25p0 * n_out26p0 / (n_out26p0 + n_out6p0 * (n_out25p0 - n_out26p0));
		
	}
// Input:20
	vec3 n_out20p0;
	n_out20p0 = FRAGCOORD.xyz;

// VectorDecompose:21
	float n_out21p0;
	float n_out21p1;
	float n_out21p2;
	n_out21p0 = n_out20p0.x;
	n_out21p1 = n_out20p0.y;
	n_out21p2 = n_out20p0.z;

// Expression:17
	float n_out17p0;
	n_out17p0=0.0;
	{
		n_out21p2 = 2.0 * n_out21p2 - 1.0;
		n_out17p0 = n_out25p0 * n_out26p0 / (n_out26p0 + n_out21p2 * (n_out25p0 - n_out26p0));
		
	}
// ScalarOp:18
	float n_out18p0;
	n_out18p0 = n_out9p0 - n_out17p0;

// VectorOp:39
	vec3 n_out39p0;
	n_out39p0 = n_out4p0 * vec3(n_out18p0);

// ScalarClamp:28
	float n_in28p1 = 0.00000;
	float n_in28p2 = 1.00000;
	float n_out28p0;
	n_out28p0 = clamp( dot(n_out39p0,vec3(0.333333,0.333333,0.333333)), n_in28p1, n_in28p2 );

// ScalarUniform:41
	float n_out41p0;
	n_out41p0 = wave_width;

// ScalarOp:30
	float n_out30p0;
	n_out30p0 = step( n_out28p0 , n_out41p0 );

// VectorOp:40
	vec3 n_out40p0;
	n_out40p0 = n_out42p0 + vec3(n_out30p0);

// Output:0
	ALBEDO = n_out40p0;
	EMISSION = vec3(n_out30p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 195, 419 )
nodes/vertex/0/position = Vector2( 680, 120 )
nodes/vertex/2/node = SubResource( 29 )
nodes/vertex/2/position = Vector2( -400, 180 )
nodes/vertex/3/node = SubResource( 30 )
nodes/vertex/3/position = Vector2( -60, 420 )
nodes/vertex/4/node = SubResource( 31 )
nodes/vertex/4/position = Vector2( -740, 280 )
nodes/vertex/5/node = SubResource( 32 )
nodes/vertex/5/position = Vector2( -1100, 320 )
nodes/vertex/6/node = SubResource( 33 )
nodes/vertex/6/position = Vector2( -580, 300 )
nodes/vertex/8/node = SubResource( 34 )
nodes/vertex/8/position = Vector2( 240, 220 )
nodes/vertex/9/node = SubResource( 35 )
nodes/vertex/9/position = Vector2( -220, 240 )
nodes/vertex/10/node = SubResource( 24 )
nodes/vertex/10/position = Vector2( 20, 200 )
nodes/vertex/11/node = SubResource( 25 )
nodes/vertex/11/position = Vector2( -900, 340 )
nodes/vertex/12/node = SubResource( 26 )
nodes/vertex/12/position = Vector2( 420, 180 )
nodes/vertex/connections = PoolIntArray( 4, 0, 6, 0, 6, 0, 2, 0, 3, 0, 8, 1, 2, 0, 9, 0, 9, 0, 10, 0, 10, 0, 8, 0, 5, 0, 11, 0, 11, 0, 6, 1, 8, 0, 12, 0, 12, 0, 0, 0 )
nodes/fragment/0/position = Vector2( 1440, 280 )
nodes/fragment/4/node = SubResource( 16 )
nodes/fragment/4/position = Vector2( 20, 120 )
nodes/fragment/6/node = SubResource( 21 )
nodes/fragment/6/position = Vector2( -720, 460 )
nodes/fragment/7/node = SubResource( 22 )
nodes/fragment/7/position = Vector2( -960, 440 )
nodes/fragment/9/node = SubResource( 23 )
nodes/fragment/9/position = Vector2( -260, 520 )
nodes/fragment/9/size = Vector2( 549, 255 )
nodes/fragment/9/input_ports = "0,0,depth;1,0,near;2,0,far;"
nodes/fragment/9/output_ports = "0,0,difference;"
nodes/fragment/9/expression = "depth = 2.0 * depth - 1.0;
difference = near * far / (far + depth * (near - far));
"
nodes/fragment/17/node = SubResource( 1 )
nodes/fragment/17/position = Vector2( -260, 960 )
nodes/fragment/17/size = Vector2( 542, 261 )
nodes/fragment/17/input_ports = "0,0,depth;1,0,near;2,0,far;"
nodes/fragment/17/output_ports = "0,0,difference;"
nodes/fragment/17/expression = "depth = 2.0 * depth - 1.0;
difference = near * far / (far + depth * (near - far));
"
nodes/fragment/18/node = SubResource( 2 )
nodes/fragment/18/position = Vector2( 440, 580 )
nodes/fragment/20/node = SubResource( 3 )
nodes/fragment/20/position = Vector2( -840, 1180 )
nodes/fragment/21/node = SubResource( 4 )
nodes/fragment/21/position = Vector2( -580, 1160 )
nodes/fragment/25/node = SubResource( 5 )
nodes/fragment/25/position = Vector2( -860, 980 )
nodes/fragment/26/node = SubResource( 6 )
nodes/fragment/26/position = Vector2( -860, 1060 )
nodes/fragment/28/node = SubResource( 7 )
nodes/fragment/28/position = Vector2( 840, 440 )
nodes/fragment/30/node = SubResource( 8 )
nodes/fragment/30/position = Vector2( 1040, 420 )
nodes/fragment/35/node = SubResource( 9 )
nodes/fragment/35/position = Vector2( -600, 60 )
nodes/fragment/36/node = SubResource( 10 )
nodes/fragment/36/position = Vector2( -340, 280 )
nodes/fragment/37/node = SubResource( 11 )
nodes/fragment/37/position = Vector2( -160, 220 )
nodes/fragment/38/node = SubResource( 12 )
nodes/fragment/38/position = Vector2( -340, 60 )
nodes/fragment/39/node = SubResource( 13 )
nodes/fragment/39/position = Vector2( 620, 460 )
nodes/fragment/40/node = SubResource( 17 )
nodes/fragment/40/position = Vector2( 1140, 160 )
nodes/fragment/41/node = SubResource( 18 )
nodes/fragment/41/position = Vector2( 820, 700 )
nodes/fragment/42/node = SubResource( 19 )
nodes/fragment/42/position = Vector2( 600, 120 )
nodes/fragment/47/node = SubResource( 20 )
nodes/fragment/47/position = Vector2( -151, -9 )
nodes/fragment/connections = PoolIntArray( 7, 0, 6, 0, 6, 0, 9, 0, 9, 0, 18, 0, 20, 0, 21, 0, 21, 2, 17, 0, 26, 0, 17, 2, 26, 0, 9, 2, 25, 0, 17, 1, 25, 0, 9, 1, 36, 0, 37, 1, 37, 0, 4, 0, 35, 0, 38, 0, 38, 0, 37, 0, 28, 0, 30, 0, 39, 0, 28, 0, 41, 0, 30, 1, 40, 0, 0, 0, 30, 0, 40, 1, 42, 0, 40, 0, 17, 0, 18, 1, 4, 0, 39, 0, 18, 0, 39, 1, 30, 0, 0, 5, 35, 0, 47, 0 )
